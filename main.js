import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import yaml from 'yaml';

// –ü–æ–ª—É—á–∞–µ–º __dirname –¥–ª—è ES –º–æ–¥—É–ª–µ–π
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    dataDir: './data',
    templateFile: './template.html',
    outputFile: './dist/index.html',
    distDir: './dist'
};

// –§–ª–∞–≥–∏ —è–∑—ã–∫–æ–≤
const LANGUAGE_FLAGS = {
    'ru': 'üá∑üá∫',
    'en': 'üá¨üáß',
    'fr': 'üá´üá∑',
    'de': 'üá©üá™',
    'es': 'üá™üá∏',
    'it': 'üáÆüáπ',
    'pt': 'üáµüáπ',
    'zh': 'üá®üá≥',
    'ja': 'üáØüáµ',
    'ko': 'üá∞üá∑',
    'ar': 'üá∏üá¶',
    'hi': 'üáÆüá≥'
};

/**
 * –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
 */
function readFile(filePath) {
    try {
        return fs.readFileSync(filePath, 'utf8');
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
        return null;
    }
}

/**
 * –ü–∞—Ä—Å–µ—Ä inline Markdown –¥–ª—è –∞–±–∑–∞—Ü–µ–≤ (–∑–∞–≥–æ–ª–æ–≤–∫–∏, –∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤, —Å–Ω–æ—Å–∫–∏)
 */
function parseInlineMarkdown(text, footnotes = [], langCode = '', addColorToBold = false) {
    let html = text;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    const headerMatch = text.match(/^(#{1,3})\s+(.+)$/);
    if (headerMatch) {
        const level = headerMatch[1].length;
        let headerText = headerMatch[2];
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–Ω–æ—Å–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
        headerText = headerText.replace(/\[\^(\d+)\]/g, (match, footnoteId) => {
            const footnote = footnotes.find(f => f.id === footnoteId);
            if (footnote) {
                const uniqueId = langCode ? `${langCode}-${footnoteId}` : footnoteId;
                return `<sup><a href="#" class="footnote-link" data-footnote="${uniqueId}" onclick="showFootnote(event, '${uniqueId}')">i</a></sup>`;
            }
            return match;
        });
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
        headerText = headerText.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
        headerText = headerText.replace(/\*(.*?)\*/g, '<em>$1</em>');
        
        return `<h${level} class="column-header">${headerText}</h${level}>`;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–Ω–æ—Å–∫–∏ [^1] - –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ —Å—Å—ã–ª–∫–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
    html = html.replace(/\[\^(\d+)\]/g, (match, footnoteId) => {
        const footnote = footnotes.find(f => f.id === footnoteId);
        if (footnote) {
            const uniqueId = langCode ? `${langCode}-${footnoteId}` : footnoteId;
            return `<sup><a href="#" class="footnote-link" data-footnote="${uniqueId}" onclick="showFootnote(event, '${uniqueId}')">i</a></sup>`;
        }
        return match;
    });
    
    // –í—ã–¥–µ–ª–µ–Ω–∏–µ –∂–∏—Ä–Ω—ã–º **—Ç–µ–∫—Å—Ç** - —Å –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º –∏–ª–∏ –±–µ–∑
    if (addColorToBold) {
        html = html.replace(/\*\*(.*?)\*\*/g, '<strong class="text-highlight">$1</strong>');
    } else {
        html = html.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    }
    
    // –í—ã–¥–µ–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∏–≤–æ–º *—Ç–µ–∫—Å—Ç*
    html = html.replace(/\*(.*?)\*/g, '<em>$1</em>');
    
    return html;
}

/**
 * –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä Markdown –¥–ª—è header.md
 */
function parseMarkdown(markdown) {
    let html = markdown;
    let footnotes = [];

    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–Ω–æ—Å–æ–∫
    // –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –∏—â–µ–º —Å–Ω–æ—Å–∫–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
    const lines = markdown.split('\n');
    const processedLines = [];
    let i = 0;
    
    while (i < lines.length) {
        const line = lines[i];
        const footnoteMatch = line.match(/^\[\^(\d+)\]:\s*(.*)$/);
        
        if (footnoteMatch) {
            const footnoteId = footnoteMatch[1];
            let footnoteText = footnoteMatch[2];
            
            // –°–æ–±–∏—Ä–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å–Ω–æ—Å–∫–∏
            i++;
            while (i < lines.length) {
                const nextLine = lines[i];
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –Ω–æ–≤—É—é —Å–Ω–æ—Å–∫—É –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if (nextLine.match(/^\[\^(\d+)\]:/) || nextLine.match(/^#{1,3}\s/)) {
                    break;
                }
                // –ï—Å–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if (nextLine.trim() === '') {
                    i++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
                    break;
                }
                footnoteText += ' ' + nextLine.trim();
                i++;
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ —Å–Ω–æ—Å–∫–∏
            let formattedText = footnoteText.trim();
            // –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∂–∏—Ä–Ω—ã–π (–¥–≤–µ –∑–≤–µ–∑–¥–æ—á–∫–∏) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π lookahead/lookbehind
            formattedText = formattedText.replace(/\*\*([^*]+?)\*\*/g, '<strong>$1</strong>');
            // –ü–æ—Ç–æ–º –∫—É—Ä—Å–∏–≤ (–æ–¥–Ω–∞ –∑–≤–µ–∑–¥–æ—á–∫–∞) - –Ω–æ –Ω–µ —Ç–µ, —á—Ç–æ —á–∞—Å—Ç—å **
            formattedText = formattedText.replace(/(?<!\*)\*([^*]+?)\*(?!\*)/g, '<em>$1</em>');
            
            footnotes.push({ id: footnoteId, text: formattedText });
        } else {
            processedLines.push(line);
            i++;
        }
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —Å–Ω–æ—Å–æ–∫
    html = processedLines.join('\n');

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–Ω–æ—Å–∫–∏ [^1] - –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ —Å—Å—ã–ª–∫–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "header"
    html = html.replace(/\[\^(\d+)\]/g, (match, footnoteId) => {
        const footnote = footnotes.find(f => f.id === footnoteId);
        if (footnote) {
            const uniqueId = `header-${footnoteId}`;
            return `<sup><a href="#" class="footnote-link" data-footnote="${uniqueId}" onclick="showFootnote(event, '${uniqueId}')">i</a></sup>`;
        }
        return match;
    });

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    html = html.replace(/^### (.*$)/gim, '<h3>$1</h3>');
    html = html.replace(/^## (.*$)/gim, '<h2>$1</h2>');
    html = html.replace(/^# (.*$)/gim, '<h1>$1</h1>');

    // –í—ã–¥–µ–ª–µ–Ω–∏–µ –∂–∏—Ä–Ω—ã–º **—Ç–µ–∫—Å—Ç**
    html = html.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');

    // –í—ã–¥–µ–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∏–≤–æ–º *—Ç–µ–∫—Å—Ç*
    html = html.replace(/\*(.*?)\*/g, '<em>$1</em>');

    // –°—Å—ã–ª–∫–∏ [—Ç–µ–∫—Å—Ç]([[N]]) - –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∞–±–∑–∞—Ü—ã
    html = html.replace(/\[([^\]]+)\]\(\[\[(\d+)\]\]\)/g, (match, text, paragraphNum) => {
        return `<a href="#paragraph-${paragraphNum}" class="paragraph-link" onclick="scrollToParagraph(event, ${paragraphNum})">${text}</a>`;
    });

    // –°—Å—ã–ª–∫–∏ –Ω–∞ –∞–±–∑–∞—Ü—ã [[N]] - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —è–∫–æ—Ä—è (–¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞)
    html = html.replace(/\[\[(\d+)\]\]/g, (match, paragraphNum) => {
        return `<a href="#paragraph-${paragraphNum}" class="paragraph-link" onclick="scrollToParagraph(event, ${paragraphNum})">${paragraphNum}</a>`;
    });

    // –°—Å—ã–ª–∫–∏ [—Ç–µ–∫—Å—Ç](url) - –æ–±—ã—á–Ω—ã–µ –≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏
    html = html.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank">$1</a>');

    // –°–ø–∏—Å–∫–∏ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥ —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ –∞–±–∑–∞—Ü—ã
    html = html.replace(/^- (.+)$/gm, '<li>$1</li>');
    html = html.replace(/(<li>.*<\/li>)/gs, '<ul>$1</ul>');

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    // –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∞–±–∑–∞—Ü—ã –ø–æ –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–∞–º
    const paragraphs = html.split(/\n\s*\n/);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∞–±–∑–∞—Ü
    html = paragraphs.map(paragraph => {
        paragraph = paragraph.trim();
        if (!paragraph) return '';
        
        // –ï—Å–ª–∏ –∞–±–∑–∞—Ü —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç HTML —Ç–µ–≥–∏ (–∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–ø–∏—Å–∫–∏), –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if (paragraph.match(/^<[h1-6]|^<ul/)) {
            return paragraph;
        }
        
        // –ò–Ω–∞—á–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤–Ω—É—Ç—Ä–∏ –∞–±–∑–∞—Ü–∞
        paragraph = paragraph.replace(/\n/g, '<br>');
        return `<p>${paragraph}</p>`;
    }).filter(p => p).join('\n');

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "header" –∫ ID —Å–Ω–æ—Å–æ–∫ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    const uniqueFootnotes = footnotes.map(f => ({
        id: `header-${f.id}`,
        text: f.text
    }));

    return { html, footnotes: uniqueFootnotes };
}

/**
 * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª
 */
function writeFile(filePath, content) {
    try {
        fs.writeFileSync(filePath, content, 'utf8');
        console.log(`‚úÖ –§–∞–π–ª ${filePath} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`);
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    }
}

/**
 * –ü–∞—Ä—Å–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —è–∑—ã–∫–∞
 * –§–æ—Ä–º–∞—Ç: –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ (–¥–æ # –¥–ª—è –º–µ–Ω—é, –ø–æ—Å–ª–µ # –¥–ª—è –∫–Ω–æ–ø–æ–∫), –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –∞–±–∑–∞—Ü—ã, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–Ω–æ—Å–∫–∏
 */
function parseLanguageFile(filePath, langCode = '') {
    const content = readFile(filePath);
    if (!content) return null;

    const lines = content.trim().split('\n');
    if (lines.length < 2) {
        console.error(`–§–∞–π–ª ${filePath} –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ + —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–±–∑–∞—Ü)`);
        return null;
    }

    // –ü–∞—Ä—Å–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É: "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –º–µ–Ω—é # –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫"
    const firstLine = lines[0];
    const parts = firstLine.split('#');
    const menuName = parts[0].trim(); // –î–æ # - –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ –º–µ–Ω—é
    const buttonName = parts.length > 1 ? parts[1].trim() : ''; // –ü–æ—Å–ª–µ # - –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
    
    // –ü–∞—Ä—Å–∏–º —Å–Ω–æ—Å–∫–∏ –∏ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    const footnotes = [];
    const processedLines = [];
    let i = 1; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞)
    
    while (i < lines.length) {
        const line = lines[i];
        const footnoteMatch = line.match(/^\[\^(\d+)\]:\s*(.*)$/);
        
        if (footnoteMatch) {
            const footnoteId = footnoteMatch[1];
            let footnoteText = footnoteMatch[2];
            
            // –°–æ–±–∏—Ä–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å–Ω–æ—Å–∫–∏
            i++;
            while (i < lines.length) {
                const nextLine = lines[i];
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –Ω–æ–≤—É—é —Å–Ω–æ—Å–∫—É –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if (nextLine.match(/^\[\^(\d+)\]:/) || nextLine.match(/^#{1,3}\s/)) {
                    break;
                }
                // –ï—Å–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if (nextLine.trim() === '') {
                    i++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
                    break;
                }
                footnoteText += ' ' + nextLine.trim();
                i++;
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ —Å–Ω–æ—Å–∫–∏
            let formattedText = footnoteText.trim();
            // –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∂–∏—Ä–Ω—ã–π (–¥–≤–µ –∑–≤–µ–∑–¥–æ—á–∫–∏) - —Å –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º –¥–ª—è —è–∑—ã–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
            formattedText = formattedText.replace(/\*\*([^*]+?)\*\*/g, '<strong class="text-highlight">$1</strong>');
            // –ü–æ—Ç–æ–º –∫—É—Ä—Å–∏–≤ (–æ–¥–Ω–∞ –∑–≤–µ–∑–¥–æ—á–∫–∞) - –Ω–æ –Ω–µ —Ç–µ, —á—Ç–æ —á–∞—Å—Ç—å **
            formattedText = formattedText.replace(/(?<!\*)\*([^*]+?)\*(?!\*)/g, '<em>$1</em>');
            
            footnotes.push({ id: footnoteId, text: formattedText });
        } else if (line.trim().length > 0) {
            processedLines.push(line);
            i++;
        } else {
            // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            i++;
        }
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º Markdown –∫ –∫–∞–∂–¥–æ–º—É –∞–±–∑–∞—Ü—É, –ø–µ—Ä–µ–¥–∞–≤–∞—è langCode –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID —Å–Ω–æ—Å–æ–∫
    // –î–ª—è —è–∑—ã–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –∫ –∂–∏—Ä–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
    const paragraphs = processedLines
        .filter(line => line.trim().length > 0)
        .map(paragraph => parseInlineMarkdown(paragraph, footnotes, langCode, true));

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å langCode –∫ ID —Å–Ω–æ—Å–æ–∫ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    const uniqueFootnotes = footnotes.map(f => ({
        id: langCode ? `${langCode}-${f.id}` : f.id,
        text: f.text
    }));

    return {
        name: menuName,          // –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –º–µ–Ω—é
        buttonName: buttonName,  // –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
        paragraphs: paragraphs,
        footnotes: uniqueFootnotes
    };
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–¥ —è–∑—ã–∫–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ 
 * –ù–∞–ø—Ä–∏–º–µ—Ä: text-ru.md -> {lang: 'ru', variant: null}
 *           text-ru-1.md -> {lang: 'ru', variant: '1'}
 */
function getLanguageInfoFromFilename(filename) {
    const match = filename.match(/text-([a-z]{2})(?:-(\d+))?\.md$/);
    if (match) {
        return {
            lang: match[1],
            variant: match[2] || null,
            fullCode: match[2] ? `${match[1]}-${match[2]}` : match[1]
        };
    }
    return null;
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç config.yaml
 */
function loadYamlConfig() {
    const configPath = path.join(CONFIG.dataDir, 'config.yaml');
    try {
        const fileContent = fs.readFileSync(configPath, 'utf8');
        const config = yaml.parse(fileContent);
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ config.yaml');
        return config;
    } catch (error) {
        console.warn('‚ö†Ô∏è  –§–∞–π–ª config.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        return {
            title: '–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç - –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –∫–Ω–∏–≥–∞',
            siteName: '–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç',
            settings: {
                maxColumns: 4,
                minColumns: 1,
                defaultTheme: 'light'
            }
        };
    }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
 */
function loadConfigFiles() {
    const dataDir = CONFIG.dataDir;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ data
    if (!fs.existsSync(dataDir)) {
        console.error(`‚ùå –ü–∞–ø–∫–∞ ${dataDir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return null;
    }

    const files = fs.readdirSync(dataDir);
    const config = {
        header: null,
        languages: {},
        yaml: loadYamlConfig()
    };

    // –ó–∞–≥—Ä—É–∂–∞–µ–º header.md
    const headerFile = path.join(dataDir, 'header.md');
    if (fs.existsSync(headerFile)) {
        const headerContent = readFile(headerFile);
        if (headerContent) {
            const parsed = parseMarkdown(headerContent.trim());
            config.header = parsed.html;
            config.footnotes = parsed.footnotes;
        }
    } else {
        console.warn(`‚ö†Ô∏è  –§–∞–π–ª ${headerFile} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞`);
        config.header = '<h2 class="book-title">–ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –∫–Ω–∏–≥–∞</h2><p class="book-author">–ê–≤—Ç–æ—Ä</p>';
        config.footnotes = [];
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã —è–∑—ã–∫–æ–≤
    const languageFiles = files.filter(file => file.startsWith('text-') && file.endsWith('.md'));
    
    if (languageFiles.length === 0) {
        console.error(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —è–∑—ã–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ text-XX.md`);
        return null;
    }

    console.log(`üìö –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —è–∑—ã–∫–æ–≤: ${languageFiles.length}`);

    // –ö–∞–∂–¥—ã–π —Ñ–∞–π–ª - –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞
    for (const file of languageFiles.sort()) {
        const langInfo = getLanguageInfoFromFilename(file);
        if (!langInfo) {
            console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥ —è–∑—ã–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞ ${file}`);
            continue;
        }

        const filePath = path.join(dataDir, file);
        const languageData = parseLanguageFile(filePath, langInfo.fullCode);
        
        if (languageData) {
            config.languages[langInfo.fullCode] = {
                name: languageData.name,           // –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –º–µ–Ω—é
                buttonName: languageData.buttonName, // –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫
                paragraphs: languageData.paragraphs,
                baseLang: langInfo.lang,
                variant: langInfo.variant,
                footnotes: languageData.footnotes || []
            };
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–Ω–æ—Å–∫–∏ –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ (—Ç–µ–ø–µ—Ä—å —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ ID)
            if (languageData.footnotes && languageData.footnotes.length > 0) {
                config.footnotes = [...config.footnotes, ...languageData.footnotes];
            }
            
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —è–∑—ã–∫: ${langInfo.fullCode} (${languageData.name}) - ${languageData.paragraphs.length} –∞–±–∑–∞—Ü–µ–≤, ${languageData.footnotes ? languageData.footnotes.length : 0} —Å–Ω–æ—Å–æ–∫`);
        }
    }

    return config;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
 */
function generateColumnControls(languages) {
    const langCodes = Object.keys(languages);
    
    return langCodes.map(langCode => {
        const language = languages[langCode];
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π —è–∑—ã–∫ –¥–ª—è —Ñ–ª–∞–≥–∞ (ru-1 -> ru)
        const baseLang = language.baseLang || langCode;
        const flag = LANGUAGE_FLAGS[baseLang] || 'üåê';
        
        return `
                    <div class="column-control" data-lang-code="${langCode}">
                        <input type="checkbox" id="lang-${langCode}" class="column-checkbox" checked onchange="toggleColumn('${langCode}')">
                        <label for="lang-${langCode}" class="column-label">
                            <span>${flag}</span>
                            <span>${language.name}</span>
                        </label>
                        <div class="order-buttons">
                            <button class="order-btn" onclick="moveLangUp('${langCode}')" title="–í–≤–µ—Ä—Ö">‚Üë</button>
                            <button class="order-btn" onclick="moveLangDown('${langCode}')" title="–í–Ω–∏–∑">‚Üì</button>
                        </div>
                    </div>`;
    }).join('\n');
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫ —è–∑—ã–∫–æ–≤
 */
function generateLanguageColumns(languages) {
    const langCodes = Object.keys(languages);
    const maxParagraphs = Math.max(...Object.values(languages).map(lang => lang.paragraphs.length));
    
    return langCodes.map(langCode => {
        const language = languages[langCode];
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π —è–∑—ã–∫ –¥–ª—è —Ñ–ª–∞–≥–∞ (ru-1 -> ru)
        const baseLang = language.baseLang || langCode;
        const flag = LANGUAGE_FLAGS[baseLang] || 'üåê';
        
        const paragraphsHtml = language.paragraphs.map((paragraph, index) => {
            return `
                <div class="paragraph" data-paragraph="${index + 1}" data-lang="${langCode}" id="paragraph-${langCode}-${index + 1}">
                    <div class="paragraph-number">${index + 1}</div>
                    <div class="paragraph-text">
                        ${paragraph}
                    </div>
                </div>`;
        }).join('\n');

        return `
            <!-- ${language.name} -->
            <div class="language-column" data-lang="${langCode}">
                <div class="language-header">
                    <div class="language-flag">${flag}</div>
                    <div class="language-name">${language.name}</div>
                </div>
                ${paragraphsHtml}
            </div>`;
    }).join('\n');
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±–µ–∑ –∫–Ω–æ–ø–æ–∫ –≤ –∞–±–∑–∞—Ü–∞—Ö
 */
function generateMobileParagraphs(languages) {
    const langCodes = Object.keys(languages);
    const maxParagraphs = Math.max(...Object.values(languages).map(lang => lang.paragraphs.length));
    
    let html = '';
    
    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–±–∑–∞—Ü–∞ —Å–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–±–µ–∑ –∫–Ω–æ–ø–æ–∫)
    for (let i = 0; i < maxParagraphs; i++) {
        const paragraphNum = i + 1;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
        const languageContents = langCodes.map(langCode => {
            const language = languages[langCode];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –∞–±–∑–∞—Ü –≤ –¥–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
            if (i < language.paragraphs.length) {
                return `
                    <div class="mobile-paragraph-content" data-lang="${langCode}">
                        <div class="paragraph" data-paragraph="${paragraphNum}">
                            <div class="paragraph-number">${paragraphNum}</div>
                            <div class="paragraph-text">
                                ${language.paragraphs[i]}
                            </div>
                        </div>
                    </div>`;
            }
            return '';
        }).filter(content => content).join('\n');
        
        html += `
            <div class="mobile-paragraph-group" data-paragraph="${paragraphNum}">
                ${languageContents}
            </div>`;
    }
    
    return html;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —è–∑—ã–∫–æ–≤ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º
 */
function generateMobileLangButtons(languages) {
    const langCodes = Object.keys(languages);
    
    return langCodes.map(langCode => {
        const language = languages[langCode];
        const baseLang = language.baseLang || langCode;
        const flag = LANGUAGE_FLAGS[baseLang] || 'üåê';
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º buttonName –∏–∑ —Ñ–∞–π–ª–∞ (–ø–æ—Å–ª–µ —Å–∏–º–≤–æ–ª–∞ #)
        const buttonText = language.buttonName ? `${flag} ${language.buttonName}` : flag;
        
        return `<button class="mobile-lang-btn" data-lang="${langCode}" onclick="switchAllMobileLang('${langCode}')">${buttonText}</button>`;
    }).join('\n            ');
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CSS –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –∞–±–∑–∞—Ü–µ–≤
 */
function generateParagraphAlignmentCSS(maxParagraphs) {
    let css = '';
    for (let i = 1; i <= maxParagraphs; i++) {
        css += `
        .paragraph[data-paragraph="${i}"] {
            margin-top: 0;
        }`;
    }
    return css;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
function generateHTML() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é HTML...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const config = loadConfigFiles();
    if (!config) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã');
        return;
    }

    const languages = config.languages;
    const langCodes = Object.keys(languages);
    
    if (langCodes.length === 0) {
        console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
        return;
    }

    // –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω
    const template = readFile(CONFIG.templateFile);
    if (!template) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —à–∞–±–ª–æ–Ω');
        return;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–º–µ–Ω—ã
    const maxParagraphs = Math.max(...Object.values(languages).map(lang => lang.paragraphs.length));
    const paragraphNumbers = Array.from({length: maxParagraphs}, (_, i) => `"${i + 1}"`).join(', ');
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 4 —è–∑—ã–∫–∞
    const defaultVisibleColumns = langCodes.slice(0, 4);
    
    const replacements = {
        '{{TITLE}}': config.yaml.title || '–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç - –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –∫–Ω–∏–≥–∞',
        '{{SITE_NAME}}': config.yaml.siteName || '–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç',
        '{{HEADER_CONTENT}}': config.header,
        '{{COLUMN_CONTROLS}}': generateColumnControls(languages),
        '{{LANGUAGE_COLUMNS}}': generateLanguageColumns(languages),
        '{{MOBILE_PARAGRAPHS}}': generateMobileParagraphs(languages),
        '{{MOBILE_LANG_BUTTONS}}': generateMobileLangButtons(languages),
        '{{VISIBLE_COLUMNS}}': JSON.stringify(defaultVisibleColumns),
        '{{ALL_LANGUAGES}}': JSON.stringify(langCodes),
        '{{PARAGRAPH_NUMBERS}}': `[${paragraphNumbers}]`,
        '{{FOOTNOTES}}': JSON.stringify(config.footnotes || [])
    };

    // –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —à–∞–±–ª–æ–Ω–µ
    let html = template;
    for (const [placeholder, value] of Object.entries(replacements)) {
        html = html.replace(new RegExp(placeholder.replace(/[{}]/g, '\\$&'), 'g'), value);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –∞–±–∑–∞—Ü–µ–≤
    const paragraphCSS = generateParagraphAlignmentCSS(maxParagraphs);
    html = html.replace('</style>', `${paragraphCSS}\n    </style>`);

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ dist –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!fs.existsSync(CONFIG.distDir)) {
        fs.mkdirSync(CONFIG.distDir, { recursive: true });
        console.log(`üìÅ –°–æ–∑–¥–∞–Ω –∫–∞—Ç–∞–ª–æ–≥ ${CONFIG.distDir}`);
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    writeFile(CONFIG.outputFile, html);
    
    console.log('üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   - –Ø–∑—ã–∫–æ–≤: ${langCodes.length}`);
    console.log(`   - –ê–±–∑–∞—Ü–µ–≤: ${maxParagraphs}`);
    console.log(`   - –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: ${CONFIG.outputFile}`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
if (import.meta.url === `file://${process.argv[1]}`) {
    generateHTML();
}

export { generateHTML, loadConfigFiles, parseLanguageFile };
